/******************************************************************************
* Copyright (C) 2010 - 2021 Xilinx, Inc.  All rights reserved.
* Copyright (C) 2022 - 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/

/****************************************************************************/
/**
* @file     xuartps_low_echo_example.c
*
* This file contains a design example using the hardware interface.
*
* First, certain character sequence is output onto the terminal. Then any
* characters typed in are echoed back, for letters, cases are switched.
* An 'ESC' character terminates the execution of the example.
*
* This example requires an external SchmartModule to be connected to the
* appropriate pins for the device through a daughter board. The test uses
* the default settings of the device:
*	. baud rate of 9600
*	. 8 bits data
* 	. 1 stop bit
* 	. no parity
*
* @note
* The test hangs if communication channel from the user terminal to the device
* is broken.
*
* MODIFICATION HISTORY:
* <pre>
* Ver   Who    Date     Changes
* ----- ------ -------- -----------------------------------------------------
* 1.00a drg/jz 01/13/10 First release
* 3.4   ms     01/23/17 Added xil_printf statement in main function to
*                       ensure that "Successfully ran" and "Failed" strings
*                       are available in all examples. This is a fix for
*                       CR-965028.
* </pre>
****************************************************************************/

/***************************** Include Files *******************************/

#include "xparameters.h"
#include "xstatus.h"
#include "xil_types.h"
#include "xil_assert.h"
#include "xuartps_hw.h"
#include "xil_printf.h"
#include "stdio.h"

/************************** Constant Definitions ***************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define UART_BASEADDR		XPAR_XUARTPS_0_BASEADDR
#define UART_CLOCK_HZ		XPAR_XUARTPS_0_CLOCK_HZ
/*
 * The following constant controls the length of the buffers to be sent
 * and received with the device. This constant must be 32 bytes or less so the
 * entire buffer will fit into the TX and RX FIFOs of the device.
 */
#define TEST_BUFFER_SIZE	16

#define CHAR_ESC		0x1b	/* 'ESC' character is used as terminator */

#define A_ROWS 64  // Adjust this according to the size of your matrix
#define A_COLS 8 // = B_ROWS
#define B_COLS 1

int matrixA[A_ROWS][A_COLS];  // Matrix A
int matrixB[A_COLS][B_COLS];  // Matrix B
int matrixSol[A_ROWS][B_COLS];

/**************************** Type Definitions *****************************/

/***************** Macros (Inline Functions) Definitions *******************/

/************************** Function Prototypes ****************************/

int UartPsEchoExample(u32 UartBaseAddress);

/************************** Variable Definitions ***************************/

/*
 * The following buffers are used in this example to send and receive data
 * with the UART.
 */
u8 SendBuffer[TEST_BUFFER_SIZE];	/* Buffer for Transmitting Data */

void multiply_matrices() {
    for (int i = 0; i < A_ROWS; i++) {
        for (int j = 0; j < B_COLS; j++) {
            matrixSol[i][j] = 0;
            for (int k = 0; k < A_COLS; k++) {
                matrixSol[i][j] += (matrixA[i][k] * matrixB[k][j]);
            }
            matrixSol[i][j] = matrixSol[i][j] / 256;
        }
    }
}

void print_matrix_csv() {
    for (int i = 0; i < A_ROWS; i++) {
        for (int j = 0; j < B_COLS; j++) {
            xil_printf("%d", matrixSol[i][j] + '0');
            if (j < B_COLS - 1) {
                xil_printf(",");  // Add ',' except for the last element in the row
            }
        }
        xil_printf("\n");  // Newline at the end of each row
    }
}


/***************************************************************************/
/**
*
* Main function to call the Uart Echo example.
*
*
* @return	XST_SUCCESS if successful, XST_FAILURE if unsuccessful
*
* @note		None
*
****************************************************************************/
int main(void)
{
	int Status;

	/*
	 * Run the Uart Echo example , specify the Base Address that is
	 * generated in xparameters.h
	 */
	Status = UartPsEchoExample(UART_BASEADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("Uartps low echo Example Failed\r\n");
		return XST_FAILURE;
	}

	xil_printf("Successfully ran Uartps low echo Example\r\n");
	return XST_SUCCESS;
}


/**************************************************************************/
/**
*
* This function does a minimal test on the UART device using the hardware
* interface.
*
* @param	UartBaseAddress is the base address of the device
*
* @return	XST_SUCCESS if successful, XST_FAILURE if unsuccessful
*
* @note		None.
*
**************************************************************************/
int UartPsEchoExample(u32 UartBaseAddress)
{
	int Index;
	u32 Running;
	u8 RecvChar;
	u32 CntrlRegister;
	int row = 0;
	int col = 0;
	int currentNum = 0;
	short is_fin_reading = 0;
	CntrlRegister = XUartPs_ReadReg(UartBaseAddress, XUARTPS_CR_OFFSET);

	/* Enable TX and RX for the device */
	XUartPs_WriteReg(UartBaseAddress, XUARTPS_CR_OFFSET,
			  ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
			   XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));
	/*
	 * Initialize the send buffer bytes with a pattern to send and the
	 * the receive buffer bytes to zero
	 */
	for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {
		SendBuffer[Index] = Index + '0';
	}

	/* Send the entire transmit buffer. */
	for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {
		/* Wait until there is space in TX FIFO */
		 while (XUartPs_IsTransmitFull(UartBaseAddress));

		/* Write the byte into the TX FIFO */
		XUartPs_WriteReg(UartBaseAddress, XUARTPS_FIFO_OFFSET,
				  SendBuffer[Index]);
	}

	Running = TRUE;
	while (Running) {
		 /* Wait until there is data */

		while (!XUartPs_IsReceiveData(UartBaseAddress));

//		RecvChar = XUartPs_ReadReg(UartBaseAddress,
//					    XUARTPS_FIFO_OFFSET);
		scanf("%c", &RecvChar);
		xil_printf("Received Char: %c\n", RecvChar);

		if ((RecvChar >= '0' && RecvChar <= '9')){
			// Accumulate the digits to form the full number
			currentNum = currentNum * 10 + RecvChar - '0';  // Shift left by one place, and add the new digit
		} else if (RecvChar == '\n' || RecvChar == ',' ){
			if (row < A_ROWS){
				matrixA[row][col] = currentNum;
				xil_printf("Storing %d in matrixA[%d][%d]\n", currentNum, row, col);
			} else {
				matrixB[row - A_ROWS][col] = currentNum;
				xil_printf("Storing %d in matrixB[%d][%d]\n", currentNum, row - A_ROWS, col);
				if (row - A_ROWS == A_COLS - 1 && col == B_COLS - 1){
					is_fin_reading = 1;
				}
			}
			col++;  // Move to the next column
			currentNum = 0;  // Reset for the next number
			if (RecvChar == '\n') {
				row++;
				col = 0;  // Move to the next row
			}
		}
		if (is_fin_reading){
			multiply_matrices();
			print_matrix_csv();
			is_fin_reading = 0;
		}
	}

	return XST_SUCCESS;
}
